name: Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: Select bump type.
        required: true
        default: patch
        type: choice
        options:
          - major
          - minor
          - patch
          - specify
      specific_version:
        description: (If bump type is "specify") Specify version.
        required: false

concurrency:
  group: release
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    uses: ./.github/workflows/lint.yaml

  parse_version:
    name: Parse new version
    runs-on: ubuntu-22.04
    outputs:
      NEW_VERSION: ${{ steps.generate.outputs.NEW_VERSION }}
      NEW_TAG: ${{ steps.generate.outputs.NEW_TAG }}
      NEW_REF: ${{ steps.generate.outputs.NEW_REF }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Generate new version
        id: generate
        run: |
          version="$(cat package.json | jq -r '.version')"
          major="$(cut -d. -f1 <<< "$version")"
          minor="$(cut -d. -f2 <<< "$version")"
          patch="$(cut -d. -f3 <<< "$version")"
          if [[ '${{ inputs.bump_type }}' == 'major' ]]; then
            new_version="$((major + 1)).0.0"
          elif [[ '${{ inputs.bump_type }}' == 'minor' ]]; then
            new_version="${major}.$((minor + 1)).0"
          elif [[ '${{ inputs.bump_type }}' == 'patch' ]]; then
            new_version="${major}.${minor}.$((patch + 1))"
          elif [[ '${{ inputs.bump_type }}' == 'specify' ]]; then
            new_version="${{ inputs.specific_version }}"
          fi
          if [[ -z "$new_version" ]]; then
            exit 1
          fi
          echo "NEW_VERSION=${new_version}" >> $GITHUB_OUTPUT
          echo "NEW_TAG=v${new_version}" >> $GITHUB_OUTPUT
          echo "NEW_REF=ci-release/v${new_version}" >> $GITHUB_OUTPUT

  bump_version_update:
    name: Bump version (update)
    runs-on: ubuntu-22.04
    needs:
      - parse_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Update package.json (root)
        run: |
          jq '.version = "${{ needs.parse_version.outputs.NEW_VERSION }}"' package.json > tmp
          mv tmp package.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bump_version_files
          path: |
            package.json

  bump_version_upload:
    name: Bump version (upload)
    runs-on: ubuntu-22.04
    needs:
      - lint
      - parse_version
      - bump_version_update
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1.11.0
        id: app-token
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PRIVATE_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          user_id="$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)"
          echo "user-id=${user_id}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Create branch
        run: |
          git switch -c ${{ needs.parse_version.outputs.NEW_REF }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bump_version_files

      - name: Commit and Push
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository }}
          git add .
          git commit -m "Release: ${{ needs.parse_version.outputs.NEW_VERSION }}"
          git push origin HEAD

  create_pr:
    name: Create PR
    runs-on: ubuntu-22.04
    needs:
      - parse_version
      - bump_version_upload
    outputs:
      PR_NUMBER: ${{ steps.create_pr.outputs.CREATED_PR }}
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1.11.0
        id: app-token
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false
          ref: ${{ needs.parse_version.outputs.NEW_REF }}
          fetch-depth: 0

      - name: Create PR
        id: create_pr
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          created_pr=$(gh pr create --draft --base main --head ${{ needs.parse_version.outputs.NEW_REF }} --title "Release: ${{ needs.parse_version.outputs.NEW_VERSION }}" --body "")
          created_pr=$(echo $created_pr | awk -F '/' '/\/pull\/[0-9]+$/ {print $NF}')
          echo "CREATED_PR=${created_pr}" >> $GITHUB_OUTPUT

  merge_pr:
    name: Merge PR
    runs-on: ubuntu-22.04
    needs:
      - create_pr
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1.11.0
        id: app-token
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Merge PR
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh pr ready ${{ needs.create_pr.outputs.PR_NUMBER }}
          gh pr merge ${{ needs.create_pr.outputs.PR_NUMBER }} --squash --delete-branch --auto

  get_merge_commit:
    name: Get merge commit
    runs-on: ubuntu-22.04
    needs:
      - create_pr
      - merge_pr
    outputs:
      MERGE_COMMIT: ${{ steps.get_merge_commit.outputs.result }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Get merge commit
        uses: corrupt952/actions-retry-command@v1.0.7
        id: get_merge_commit
        with:
          command: gh pr view ${{ needs.create_pr.outputs.PR_NUMBER }} --json mergeCommit --template '{{ .mergeCommit.oid }}'
          working_directory: ${{ github.workspace }}
          max_attempts: 10
          retry_interval: 10

  release:
    name: Release
    runs-on: ubuntu-22.04
    needs:
      - parse_version
      - get_merge_commit
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1.11.0
        id: app-token
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PRIVATE_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          user_id="$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)"
          echo "user-id=${user_id}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false
          ref: ${{ needs.get_merge_commit.outputs.MERGE_COMMIT }}
          fetch-depth: 0

      - name: Create tag
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository }}
          git tag ${{ needs.parse_version.outputs.NEW_TAG }} ${{ needs.get_merge_commit.outputs.MERGE_COMMIT }}
          git push origin ${{ needs.parse_version.outputs.NEW_TAG }}

      - name: Create Release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh release create ${{ needs.parse_version.outputs.NEW_TAG }} --generate-notes
